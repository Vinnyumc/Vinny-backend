name: CI/CD to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 912394945783.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: vinny-project
  IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials (OIDC 권장)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🐳 Login to Amazon ECR (Runner)
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: 📦 Build & Push
        run: |
          GIT_SHA=${{ github.sha }}
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REPOSITORY:$GIT_SHA .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:$GIT_SHA  $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_SHA

      - name: 🚀 Deploy to EC2 (Compose only)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 10m
          script_stop: true
          envs: AWS_DEFAULT_REGION,ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG
          script: |
            set -Eeuo pipefail

            REGION="${AWS_DEFAULT_REGION:-ap-northeast-2}"
            COMPOSE_DIR="/home/ubuntu"
            COMPOSE_FILE="$COMPOSE_DIR/docker-compose.yml"

            # 1) ECR 로그인 (EC2)
            aws ecr get-login-password --region "$REGION" \
              | docker login --username AWS --password-stdin "$ECR_REGISTRY"

            # 2) compose에서 사용할 변수 export (compose 파일이 변수화돼 있다면)
            export ECR_REGISTRY ECR_REPOSITORY IMAGE_TAG

            # 3) compose 디렉터리로 이동 (.env 상대경로 보장)
            cd "$COMPOSE_DIR"

            # 4) 최신 이미지 pull 후 변경분만 재생성 (네트워크/볼륨 유지)
            docker compose -f "$COMPOSE_FILE" pull
            docker compose -f "$COMPOSE_FILE" up -d --remove-orphans --no-build --pull always

            # (옵션) 오래된 dangling 이미지 정리
            docker image prune -f
