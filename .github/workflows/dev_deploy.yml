name: CI/CD to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 912394945783.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: vinny-project
  IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials (OIDC 권장)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🐳 Login to Amazon ECR (Runner)
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: 📦 Build & Push
        run: |
          GIT_SHA=${{ github.sha }}
          # latest와 SHA 두 태그 모두 푸시
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REPOSITORY:$GIT_SHA .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:$GIT_SHA  $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_SHA

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 10m
          script_stop: true
          envs: AWS_DEFAULT_REGION,ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG
          script: |
            set -Eeuo pipefail

            ECR_REGISTRY="${ECR_REGISTRY:-912394945783.dkr.ecr.ap-northeast-2.amazonaws.com}"
            ECR_REPOSITORY="${ECR_REPOSITORY:-vinny-project}"
            IMAGE_TAG="${IMAGE_TAG:-latest}"
            REGION="${AWS_DEFAULT_REGION:-ap-northeast-2}"

            # 1) ECR 로그인
            aws ecr get-login-password --region "$REGION" \
              | docker login --username AWS --password-stdin "$ECR_REGISTRY"

            # 2) 8080을 publish한 모든 컨테이너 종료/삭제 (compose 포함)
            MAP_IDS=$(docker ps --format '{{.ID}} {{.Ports}}' \
              | awk '/(0\.0\.0\.0|::):8080->/ {print $1}')
            if [ -n "${MAP_IDS:-}" ]; then
              echo "Stopping containers publishing :8080 -> ${MAP_IDS}"
              docker rm -f $MAP_IDS
            fi

            # (옵션) compose로 뜬 것이 있으면 orphans까지 내리기
            # [경로 조정] docker-compose.yml이 있다면 주석 해제
            if [ -f /home/ubuntu/docker-compose.yml ]; then
              docker compose -f /home/ubuntu/docker-compose.yml down --remove-orphans
            fi

            # 3) 이전 앱 컨테이너 정리 (이름 기준)
            docker rm -f vinny-app || true

            # 4) 포트 완전 해제 대기 (최대 30초)
            for i in $(seq 1 30); do
              if ! ss -lntp | grep -q ':8080'; then break; fi
              sleep 1
            done
            
            if ss -lntp | grep -q ':8080'; then
              echo "ERROR: 8080 still in use"
              docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Ports}}' | (grep 8080 || true)
              exit 1
            fi
            
            # 5) 최신 이미지 pull
            docker pull "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            # 6) 컨테이너 실행
            docker run -d --restart=always \
              --name vinny-app \
              --env-file /home/ubuntu/.env \
              -e SPRING_PROFILES_ACTIVE=prod \
              -p 8080:8080 \
              "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
